<!doctype html>
<html lang="en">
	<head>
	    <meta charset="UTF-8">
        <meta name="Author" content="Pep Oncins">
        <meta name="Keywords" content="Thunkable,TeachableMachine,AI">
        <meta name="Description" content="Web to comunicate the teachable machine with the thunkable platform using messages">
		<title>Image to text using Thunkable app</title>
	</head>
	<body>
		<div id="debugPanel">
			<div>Debug mode on. V2.6</div>
			<button type="button" id="initButton" onclick="init('1')">Start</button>
			<button type="button" id="reloadButton" onclick="location.reload()">Reload</button>
			<div id="theInformationLabel"></div>
		</div>
		<video id="theVideo" style="width:100%"></div>
		<div id="theDivCanvas"></div>
	</body>

	<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
	<script src="https://thunkable.github.io/webviewer-extension/thunkableWebviewerExtension.js" type="text/javascript"></script>
	<script type="text/javascript">


		// -----------------------
		// Attributes changeable using messages from thunkable program
		// -----------------------
		// Set it to true to see a label with the initialization process and the text interpreted
		// Change it using the message 'Debug:[0|1]' or 'Debug:[true|false]'
		var _DEBUG_ = true;
		// Set it to true to post the debug message 
		var _ECHO_ = false;
		document.getElementById("debugPanel").hidden = !_DEBUG_;
		// URL base where the teachable machine model and metadata is
		// Change it using the message 'URL:<string>'
		var URL_ = "./hello/";
		// Set audioOn_ to true to enable the audio in the user media
		// Change it using the message 'AudioOn:[0|1]' or 'AudioOn:[true|false]'
		var audioOn_ = false;
		// Canvas Width and Height
		// Change it using the message 'WxH:<int>x<int>'
		var canvasWidth = 720;
		var canvasHeight = 480;
		// To control the hysteresis
		// Time which is considered a stable image (in milliseconds)
		// Change it using the message 'TimeStable:<int>'
		const timeConsiderStable_ = 500

		// -----------------------
		// Variables
		// -----------------------
		// Image canvas and video
		var canvas_;
		var ctx_;
		var video_ = document.getElementById("theVideo");

		// Model used and number of classes defined in the model
		var theModel_, numClassesDefined_;

		// Last text found
		var lastTextFound_ = "";
		// Time that the predicted text changed
		var lastTimeTextChanged_ = 0;
		// If the actual text was sent
		var textSent_ = false;


		function setDebug(isDebug)
		{
			_DEBUG_ = false;
			if (isDebug == "1" || isDebug == "true")
			{
				_DEBUG_ = true;
			}
			document.getElementById("debugPanel").hidden = !_DEBUG_;
		}

		function setAudioOn(isAudioOn)
		{
			audioOn_ = false;
			if (isAudioOn == "1" || isAudioOn == "true")
			{
				audioOn_ = true;
			}
		}

		function setURL(newURL)
		{
			URL_ = newURL;
		}

		function setWidthAndHeight(widthAndHeight)
		{
			var wxh = widthAndHeight.split("x");
			canvasWidth = parseInt(wxh[0])		 
			canvasHeight = parseInt(wxh[1])
		}

		function setTimeStable(timeStable)
		{
			timeConsiderStable_ = parseInt(timeStable);
		}

		function setMessage(msg, postMessage)
		{
			if (_DEBUG_)
			{
				document.getElementById("theInformationLabel").innerHTML = msg;
			}

			if (postMessage && _ECHO_)
			{
				ThunkableWebviewerExtension.postMessage(msg);
			}
		}

		function appendMessage(msg)
		{
			if (_DEBUG_)
			{
				document.getElementById("theInformationLabel").innerHTML += msg;
			}
		}

		function addCanvas()
		{
			var canvasDef = '<canvas id="theCanvas" width="' + canvasWidth + '" height="' + canvasHeight + '"></canvas>';
			document.getElementById("theDivCanvas").innerHTML = canvasDef;
			canvas_ = document.getElementById("theCanvas");
			ctx_ = canvas_.getContext('2d');
			ctx_.canvas.hidden = true;
		}

		// Initializates the model and calls to initializate the camera
	    async function init(indexCam) 
		{			
			setMessage("Initializing canvas", true);
			addCanvas()
			setMessage("Initializing model", true);
	        const modelURL = URL_ + "model.json";
		    const metadataURL = URL_ + "metadata.json";
		    theModel_ = await tmImage.load(modelURL, metadataURL);
	        numClassesDefined_ = theModel_.getTotalClasses();
			setMessage("Initializing system", true);
			try
			{
				// Once the model is initiated, we init the camera using the index device
				await initCam(indexCam);
			}
			catch (error)
			{
				setMessage("Error initializing Cam. " + error, true);
			}
		}

	    // Load the image model and setup the webcam
		async function initCam(indexCam) 
		{
			setMessage("Initializing CAM("+indexCam+")", true);

			navigator.mediaDevices.enumerateDevices()
				.then(function(devices) {
					var cameras = [];
					devices.forEach(function(device) {
						'videoinput' === device.kind && cameras.push(device.deviceId);
					});
					var msg = "Cams found:<br>";
					var br="";
					for (var iCnt = 0; iCnt<cameras.length; iCnt++)
					{
						msg += br;
						msg += "DeviceId(";
						msg += iCnt;
						msg += "):";
						msg += cameras[iCnt];
						br = "<br>";
					}
					setMessage(msg, true);
  					continueCam(cameras[parseInt(indexCam)]);
				})
				.catch(function(err) 
				{
					setMessage(err.name + ": " + err.message, true);
				});
		}

		async function continueCam(idCamera)
		{
			setMessage("Using camera: " + idCamera, true);
			const constraints2 = { audio: audioOn_, 
								   video: {  
								     width: canvasWidth,
								     height: canvasHeight,
								     deviceId: {exact : idCamera}
								   } 
							     };

			navigator.mediaDevices.getUserMedia(constraints2)
				.then(function(mediaStream) {
					setMessage("CAM Initialized", true);
					video_.srcObject = mediaStream;
					video_.onloadedmetadata = function(e) {
						video_.play();
						window.requestAnimationFrame(loop);
					};
				})
				.catch(function(err) { setMessage(err.name + ": " + err.message, true); }); // always check for errors at the end.
		}

		// The loop will capturate the video image, pass it to the canvas and
		// call to the predict model function
		// Once we have the result, we search for the more probabile
		// Do an hysteresis algorithm and if the text changed, send the message to the thunkable extension
	    async function loop() 
		{
			ctx_.drawImage(video_, 0, 0);
			const prediction = await theModel_.predict(canvas_);
			max = 0;
			index = 0;
			var res = ""

			for (let i = 0; i < numClassesDefined_; i++) 
			{
				res += prediction[i].className + "("+prediction[i].probability.toFixed(2)+")<br>"
				if (max < prediction[i].probability.toFixed(2))
				{
					max = prediction[i].probability.toFixed(2);
					index = i;
				}
			}
			
			setMessage(res, false);

			var currTextFound = prediction[index].className;
			if (lastTextFound_ == currTextFound)
			{
				var currTime = Date.now();
				if (currTime - lastTimeTextChanged_ >= timeConsiderStable_ && !textSent_)
				{
					textSent_ = true;
					ThunkableWebviewerExtension.postMessage(currTextFound);
				}
			}
			else
			{
				lastTimeTextChanged_ = Date.now();
				lastTextFound_ = currTextFound;
				textSent_ =  false;
			}

			// Execute the loop forever
			window.requestAnimationFrame(loop);
		}

		// Here we have all the messages that receives from the thunkable program
		// All variable options are described above in the variable part
		// The InitCam message is needed to initiate the system. It will receive the number
		// of the camera to initiate just after the InitCam literal.
		// For instance InitCam1
		ThunkableWebviewerExtension.receiveMessage(function(missatge) 
		{
			setMessage(missatge, false);
			if (missatge.substring(0,4) == "URL:")
			{
				setURL(missatge.substring(4,missatge.length));
			}
			else if (missatge.substring(0,6) == "Debug:")
			{
				setDebug(missatge.substring(6,missatge.length));
			}
			else if (missatge.substring(0,8) == "AudioOn:")
			{
				setAudioOn(missatge.substring(8,missatge.length));
			}
			else if (missatge.substring(0,4) == "WxH:")
			{
				setWidthAndHeight(missatge.substring(4,missatge.length))
			}
			else if (missatge.substring(0,11) == "TimeStable:")
			{
				setTimeStable(missatge.substring(11,missatge.length));
			}
			else if (missatge.substring(0,5) == "Init:")
			{
				init(missatge.substring(5,6));
			}
		});

	</script>
</html>